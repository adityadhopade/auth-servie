to install ts => npm install -D typescript @types/node ts-node nodemon

to install tsconfig file ==> npx tsc --init 

baseURl ==> all ts files in src folder
    "paths": {
      "@/*": ["*"] // used for aliases like ..* etc
    }

    outdir ==> goes to build folder and compiled stiff will be in it.

    emitDecoratormetadata: used for type orm

    strictproper ==> for best practices in ts

    in the package.json do the following like 

      "scripts": {
    "format": "prettier .",
    "format:check":"npm run format -- --check",
    "format:fix": "npm run format -- --write",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

  also add the .vscode folder in that create settings.json it will override global settings

install eslint to get good code practices
npm install -D @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint


eslint rules: https://eslint.org/docs/latest/rules/

If there is a conflict between the files of eslint and prettier then we need to do is install eslint-config-prettier as dependency

Husky: It is used to automate the lint also it is used to precommit.. iske andar kuch scripts likhenge.. so commit ke pehle kuch run karna

precommit- Jab bhi ham koi code commit karenge to uske pehle is husky ke andar kuch scripts likhenge; commit se pehle ye run karna
 npm install husky --save-dev
 npm install husky --save-dev => It creates the husky folder
 
 npx husky install ==> to enable githooks 

 But agar koi dev hamare repo ko clone karta hai to usme bhi husky automatically set hona chaiye

 command for that is 

 npm pkg set scripts.prepare="husky install"

 iske baaad apko ye package.json meijn under scripts :
 { "prepare" = "husky install" } added dikhega so developer ko ab manually exoplictly add karne ki koi jarurat nahi padegi

To create a hook 

npx husky add .husky/pre-commit "npm test" => Husky add aur konsi script hame addd karni hain in this case under test mein jo script hai wo script

npx husky add .husky/pre-commit "npm run lint" =. hamare pass filhal test script nahi hai to by that time ham log lint ko add kar sakte hain

par kya ye kaam kar raha hai ?

ek config.ts file src me banao ==. usme apne eslint jisse violet ho aisa code likho

eg. const user = 'Aditya';

so ye warning to hame deta hai par code commit karne deta hain

isse avoid karne ke liye ham logo ko ek naya package install karna padega "staged lint"

"staged lint" => Hame allow hi nahi karega ki hum koi commit karpaye without resolving the eslint warnings and error.

npm install --save-dev lint-staged # requires further setup

add karo "lint-staged" underr root files as a object above devDependencies

"lint-staged": {
  "*.ts": [ 
    "eslint --max-warnings=0"
  ]
},

koi bhi ts file mein ek bhi warning ho toh apna commit fail ho jayega

to ye chanegs pre-commit.sh mein bhi kar sakte hain

"npm run lint" replace karo "npx lint-staged" isse hamara husky ye commad run karega aur inside lint-staged ==> "eslint --max-warnings=0" ye run hoga so ek bhi warning aai to code failed

Abhi test karke dekhte hai.. run nahi hona chahitye [kuch changes karo app.ts file mein]

Ye kaafi accha hain easy, maintainable code ke liye


ham dusra rule bnhi daal sakte hain prettier ke liye in lint-staged

"prettier --check" # taki ham verify kar paaye apne hisab se ki konsa chane karna chahiye ==> file app.ts delete karo aur push kardo chanegs
---------------------------------------------------
App configuration


ham log ek file abana lete hai app.ts in src folder
agar koi env varaible use karna hai toh ham kya kar sakte hain

process.env.PORT ==> ham log env varaible ko ek centralised location pein layenge; fir wahase usko export karenge(mainatinability ke liye sahi hojayega)

make a folder "config" under src ==> index.ts and dotenv file needed to be added

dot env hame install karni padega
config ==> index.ts

npm i dotenv

import { config } from 'dotenv'; # hame config part chahiye dotenv se

config() =. ko call karenge

const {PORT} = process.env; # hame destructre karna padega PORT variable ko; jisse hame process.env ka access PORT mein mil paaye

export const CONFIG = {
  PORT,
}

Ab isse export kaise karna hain

app.ts

import {CONFIG} from './config/index.ts'; 

import { CONFIG } from './config/';
CONFIG.PORT;

Is tragh se ham inhe import kar sakte hain aur CONFIG.PORT is tarah se use bhi kar sakte hain

so index.ts mein ham ek baar varaibles ko define karenge aur usko export kar ke bahar bh i use karenge. jisse hame jyada chance milega.

------------------------------------------------

Express JS setup

npm i express (install express)

make a file in config foldfer ==<> app.ts

why app.ts not server.ts ?
kyuki ham log express ka code yaha in app.ts run karenge fir is app ko srver.ts mein import karenge aur waha run karenge 

import express from 'express';

'/home/aditya/instructors/coders_gyan/pizza_project/auth-service/node_modules/express/index.js' implicitly has an 'any' type.

so typescript mein express ke liye typescript type by default nahi mil raha so isse hame export karna padega

npm i -D @types/express ==> resolves the error above

const app = express();
app.use();

hame kuch middle wares bhi add karne padenge like JSON; kyuki API call kar rahe hain toh ofcourse JSON Data bhi ayega isme


app.use(express.json());

aur CORS bhi lagega [Cross Orgin Resource Sharing]

import cors from 'cors' ==> install it using npm i cors
app.use(cors()); # isko

error isko declaration files nahi mil rahi hain
npm i -D @types/cors (typescript resolution)

in server.ts in the main folder we need to create this folder

server.ts 
import { CONFIG } from '@/config'; # import config ke andar ka port
import app from './src/app'; # import app

const PORT = CONFIG.PORT || 8000;

const startServer = async (port: number) => {
    try {
        app.listen(port, () => {
            console.log(`Listening on PORT ${port}`);
        });
    } catch (err: any) {
        console.log(`Something went wrong`, err);
    }
};

startServer(PORT as number);

const startServer = async (port) ==> Throws wrror due to our typescript scrict rules as the parametrs should have a defined type so we added it as number

startServer(PORT); => throws an error so we set it as the number

startServer(PORT as number);

hamne con solelof for now rakha hain but ham usko bhi chnage karenge

server run karke dekhne ke liye 

"dev": "nodemon server.ts" ==> In package.json we need to add the following like inside scripts

"dev": "nodemon server.ts",

app crashed ==> it dosent get the reference of @ so we get it as 

import { CONFIG } from '@/config'; 

chnage it as the followong like 

import { CONFIG } from './src/config';

---------------------------------------
now create a .env file which contains the 

PORT=5501 as setted

nodemon mein server.ts kaise kaam karta hain ?
agar hamare app mein ts-node ho toh nodemon ts-node ko hi use karta hain

interanly "ts-node server.ts"

------------

abhi ek route leke try karte hain work kar raha hia ki nahi? 

app.get('/',(req,res )=>{
  res.send('Welocme to api auth service')
})

--------------

but we cannot commit it as we have set the rukle for noconsole and in the server.ts we have commmit statement

we shoukld either remove it or make it commented

but it will still now works as we need to make a change in the server.ts file for the server.js file in the error block

catch (err: any) ==. to  catch(err: unknown) for now we will chaneg it to something else later

Now our code will work

-=--------------------------------------------------

Setting up the logger ==> to cechk the application logs, monitor errors and app, debug the application. It has various logs in iit; it is very important in the production application 

we will use the winston as the logger package in npm

install the package ==> npm install winston
and install its types also in it ==> npm i -D @types/winston

in src/config ==> create logger file (logger.ts)

logger.ts ==> 

import winston from 'winston';
export const logger = winston.createLogger({
    level: 'info', 
});

level: 'info' we need to make it dynamic with the help of env variables so taht we can debug when there in the production just by provideing it level as 'info'

so add karo LOG_LEVEL in the index.ts aur usko export bhi karo

aur isko add karo .env file ke andar

LOG_LEVEL=info

also make change in the logger.ts file

format ==> log message ka format konse type ka hona chahiye; ye ek particular structure mein ho toh jo external systems hai like elasticsearch wo is system ko properly analyse kar paaye

defaultMeta: har ek log mesage ke sath attach hoke jayega. 

format option mein kaafi saare options hai.. ham json le sakte hain aur formats ko mix bhi kar sakte hain

defaultMeta: { service: 'authservice' }, # pass karenge apne service ka naam jo hai authservice here

transport: ye indicate karta hai apka storage location
kaafi saare types ke ham storage use kar sakte hain files aur kaafi saare 3rd party services (elastic search, dynamodb etc)

    transports: [
        new winston.transports.Console({
            format: winston.format.simple(),
        }),
    ],

 isme ham transport use kar rahe hai of type console jo work karega same as that of terminal pein ham jaise log dekhte hain same waise hiiin


   // format: winston.format.simple(),
   but isse ham jyada kuch decipher nahi kar sakte; so hame yeh toh change karna padega

  kyoki yaha timestamp aur baaki details nahi mil rahe hain to change karenge

  winston.format.combine() ==> isme multiple method ko combine kar sakte hain

  winston.format.combine(
    winston.format.timestamp(),
    winston.format.json(),
  ),

  Ab ye ek structured fomat mein hain aur isse ham log ek application ko bhej sakte hain like "elasticsearch" jo hamare logs ko log-levels se filter kar sakta hain

If we make this change in the server.ts in the logger.info message like => logger.info(`Listening on PORT ${port}`, { serviceId: 1234 });

Then we can see the serviceId is getting atdded in it ; it means that our custom fields(metadata) can get added into logger messages. 
{"level":"info","message":"Listening on PORT 5501","service":"authservice","serviceId":1234,"timestamp":"2023-09-12T08:46:18.513Z"}

now we will create the logger of type file to save our file application.log in the logs folder

new windston.transports.File({
  dirname: 'logs' # name of tghe folder
  filename: 'application.log', #name of the file where the logs get stored
  level: 'info' # name of the level
  silent: false # we will save all our logs into file.
})

same ham log errors ke liye bhi kar sakte hain

new windston.transports.File({
  dirname: 'logs' # name of tghe folder
  filename: 'error.log', #name of the file where the logs get stored
  level: 'error' # name of the level
  silent: false # we will save all our logs into file.
})

initially it will not throw the error as it do not have errors

so we need tothrow error by ourselvers for that in server.ts


const startServer = async (port: number) => {
    try {
        app.listen(port, () => {
            logger.info(`Listening on PORT ${port}`, { serviceId: 1234 });
            // console.log(`Listening on PORT ${port}`);
        });
        throw new Error('New Artificial Error here');
    } catch (err: unknown) {
        if (typeof err === 'object' && err !== null && 'message' in err) { # this checks if err type is object and err!= null also if message is present then only it will enter this loop
            logger.error(`Soemthing went wrong error ${err.message}`); # as we need the message here
        }
        // console.log(`Something went wrong`, err);
    }
};


-----------------------------

What are levels in transport

level: 'error': error level ke jitne bhi log hai wo hame error.log mein dikhne chahiye

iske andar ek hirearchy hoti hain (0 to 6)

{
  error: 0,
  warn: 1,
  info: 2,
  http: 3,
  verbose: 4,
  debug: 5,
  silly: 6
}

isme hota yeh hain ki suppose hamne level: 'info' set ki hai toh uske andar info ke aur uske upar ke i.e. error and warnings ke saare logs dikhenge.

level:'error' isme saare error aur uske upar ke logs store honge(par uske updar kuch hai nahi actually so isme bs errors hi dikhenge)

ye logger especially ueful hai hamare level:debug ki case mein isme hamare updar ke saare logs ayenge error, warn,info,http,verbose.

It is expected to have more data to debug.
We can passs our requests in debug also; but remeber do not pass any sensitive data in the debug logs.(Not a good practice)

-----------------

Hamne logger.ts mein already level set ki hai
level: CONFIG.LOG_LEVEL so we can remove it from transport.

Also here we can remove the silent: false as during the testing we do not need log

so ham log index.ts mein ek change karte hain

ek aur variable add karte hain by the name of ENVIRONMENT (isme dev, production, staging environemnet honge)

silent: CONFIG.ENVIRONMENT === 'test',

if env is test it will return true ; silent:true and it will not log any logs in the application.log file

ham ise transport console mein bhi add kar sakte hain

silent: CONFIG.ENVIRONMENT === 'production' || CONFIG.ENVIRONMENT === 'testing'

like below

        new winston.transports.Console({
            silent: CONFIG.ENVIRONMENT === 'production'
        }),

Remove all the console.log statements
----------------------------------------

setting up the Error handling in Project in NodeJS application


there is a great library "http-errors" for error handling

npm i http-errors
npm i -D @types/http-errors

in app.ts usually ham log errors ke liye block hamesha routes ke niche likhte hai to collect all the errors

usually express middleware mein 3 fields hoti hain request, response, next(nextFunction)

But ham logo ko eror ke liye naya middle ware use karna hain jisme yeh saari fields ho + error field bhi ho like

app.use((err: HttpError, req: Request, res: Response, next: nextFunction ))
{

}

final error ke liye block kaisa rahega

app.use((err: HttpError, req: Request, res: Response, next: NextFunction) => {
    logger.error(err.message);
    res.status(err.statusCode).json({ // andar structured message bhejenge
        name: err.name, # name of the eerror
        statusCode: err.statusCode, # sattus code 
        message: err.message, # mesage in the error
        details: [], # further details in it like validation errors in some fields
    });
});

res.status(err.statusCode) yeh helpfukl rahega hamare client applications ke liye like react front end app so we can detect what type of error it is 

make thius change if the next:NextFunction is givin gout warning
    "lint-staged": {
        "*.ts": [
            "prettier --check",
            "eslint --max-warnings=10"
        ]
    },

Error handling mein agar hame async functions use karne hai aur agar usme error aaraha hai 

async(req, res) => {

}

So add karo next as 3rd parameter and it will catch the error in the global error handler then

async(req, res, next) => {

}

-------------------

For setting up testing we will be using the Jest Framework in it(Most popular)

We will be creating the unit testing and the end to end testing for the application

npm install --save-dev jest // as a Development dependency

in package.json add
"test": "jest"

we need to insitilaise the configuration file here as we are using typescript

