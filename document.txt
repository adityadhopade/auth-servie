to install ts => npm install -D typescript @types/node ts-node nodemon

to install tsconfig file ==> npx tsc --init 

baseURl ==> all ts files in src folder
    "paths": {
      "@/*": ["*"] // used for aliases like ..* etc
    }

    outdir ==> goes to build folder and compiled stiff will be in it.

    emitDecoratormetadata: used for type orm

    strictproper ==> for best practices in ts

    in the package.json do the following like 

      "scripts": {
    "format": "prettier .",
    "format:check":"npm run format -- --check",
    "format:fix": "npm run format -- --write",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

  also add the .vscode folder in that create settings.json it will override global settings

install eslint to get good code practices
npm install -D @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint


eslint rules: https://eslint.org/docs/latest/rules/

If there is a conflict between the files of eslint and prettier then we need to do is install eslint-config-prettier as dependency

Husky: It is used to automate the lint also it is used to precommit.. iske andar kuch scripts likhenge.. so commit ke pehle kuch run karna

precommit- Jab bhi ham koi code commit karenge to uske pehle is husky ke andar kuch scripts likhenge; commit se pehle ye run karna
 npm install husky --save-dev
 npm install husky --save-dev => It creates the husky folder
 
 npx husky install ==> to enable githooks 

 But agar koi dev hamare repo ko clone karta hai to usme bhi husky automatically set hona chaiye

 command for that is 

 npm pkg set scripts.prepare="husky install"

 iske baaad apko ye package.json meijn under scripts :
 { "prepare" = "husky install" } added dikhega so developer ko ab manually exoplictly add karne ki koi jarurat nahi padegi

To create a hook 

npx husky add .husky/pre-commit "npm test" => Husky add aur konsi script hame addd karni hain in this case under test mein jo script hai wo script

npx husky add .husky/pre-commit "npm run lint" =. hamare pass filhal test script nahi hai to by that time ham log lint ko add kar sakte hain

par kya ye kaam kar raha hai ?

ek config.ts file src me banao ==. usme apne eslint jisse violet ho aisa code likho

eg. const user = 'Aditya';

so ye warning to hame deta hai par code commit karne deta hain

isse avoid karne ke liye ham logo ko ek naya package install karna padega "staged lint"

"staged lint" => Hame allow hi nahi karega ki hum koi commit karpaye without resolving the eslint warnings and error.

npm install --save-dev lint-staged # requires further setup

add karo "lint-staged" underr root files as a object above devDependencies

"lint-staged": {
  "*.ts": [ 
    "eslint --max-warnings=0"
  ]
},

koi bhi ts file mein ek bhi warning ho toh apna commit fail ho jayega

to ye chanegs pre-commit.sh mein bhi kar sakte hain

"npm run lint" replace karo "npx lint-staged" isse hamara husky ye commad run karega aur inside lint-staged ==> "eslint --max-warnings=0" ye run hoga so ek bhi warning aai to code failed

Abhi test karke dekhte hai.. run nahi hona chahitye [kuch changes karo app.ts file mein]

Ye kaafi accha hain easy, maintainable code ke liye


ham dusra rule bnhi daal sakte hain prettier ke liye in lint-staged

"prettier --check" # taki ham verify kar paaye apne hisab se ki konsa chane karna chahiye ==> file app.ts delete karo aur push kardo chanegs
---------------------------------------------------
App configuration


ham log ek file abana lete hai app.ts in src folder
agar koi env varaible use karna hai toh ham kya kar sakte hain

process.env.PORT ==> ham log env varaible ko ek centralised location pein layenge; fir wahase usko export karenge(mainatinability ke liye sahi hojayega)

make a folder "config" under src ==> index.ts and dotenv file needed to be added

dot env hame install karni padega
config ==> index.ts

npm i dotenv

import { config } from 'dotenv'; # hame config part chahiye dotenv se

config() =. ko call karenge

const {PORT} = process.env; # hame destructre karna padega PORT variable ko; jisse hame process.env ka access PORT mein mil paaye

export const CONFIG = {
  PORT,
}

Ab isse export kaise karna hain

app.ts

import {CONFIG} from './config/index.ts'; 

import { CONFIG } from './config/';
CONFIG.PORT;

Is tragh se ham inhe import kar sakte hain aur CONFIG.PORT is tarah se use bhi kar sakte hain

so index.ts mein ham ek baar varaibles ko define karenge aur usko export kar ke bahar bh i use karenge. jisse hame jyada chance milega.

------------------------------------------------

Express JS setup

npm i express (install express)

make a file in config foldfer ==<> app.ts

why app.ts not server.ts ?
kyuki ham log express ka code yaha in app.ts run karenge fir is app ko srver.ts mein import karenge aur waha run karenge 

import express from 'express';

'/home/aditya/instructors/coders_gyan/pizza_project/auth-service/node_modules/express/index.js' implicitly has an 'any' type.

so typescript mein express ke liye typescript type by default nahi mil raha so isse hame export karna padega

npm i -D @types/express ==> resolves the error above

const app = express();
app.use();

hame kuch middle wares bhi add karne padenge like JSON; kyuki API call kar rahe hain toh ofcourse JSON Data bhi ayega isme


app.use(express.json());

aur CORS bhi lagega [Cross Orgin Resource Sharing]

import cors from 'cors' ==> install it using npm i cors
app.use(cors()); # isko

error isko declaration files nahi mil rahi hain
npm i -D @types/cors (typescript resolution)

in server.ts in the main folder we need to create this folder

server.ts 
import { CONFIG } from '@/config'; # import config ke andar ka port
import app from './src/app'; # import app

const PORT = CONFIG.PORT || 8000;

const startServer = async (port: number) => {
    try {
        app.listen(port, () => {
            console.log(`Listening on PORT ${port}`);
        });
    } catch (err: any) {
        console.log(`Something went wrong`, err);
    }
};

startServer(PORT as number);

const startServer = async (port) ==> Throws wrror due to our typescript scrict rules as the parametrs should have a defined type so we added it as number

startServer(PORT); => throws an error so we set it as the number

startServer(PORT as number);

hamne con solelof for now rakha hain but ham usko bhi chnage karenge

server run karke dekhne ke liye 

"dev": "nodemon server.ts" ==> In package.json we need to add the following like inside scripts

"dev": "nodemon server.ts",

app crashed ==> it dosent get the reference of @ so we get it as 

import { CONFIG } from '@/config'; 

chnage it as the followong like 

import { CONFIG } from './src/config';

---------------------------------------
now create a .env file which contains the 

PORT=5501 as setted

nodemon mein server.ts kaise kaam karta hain ?
agar hamare app mein ts-node ho toh nodemon ts-node ko hi use karta hain

interanly "ts-node server.ts"

------------

abhi ek route leke try karte hain work kar raha hia ki nahi? 

app.get('/',(req,res )=>{
  res.send('Welocme to api auth service')
})

--------------

but we cannot commit it as we have set the rukle for noconsole and in the server.ts we have commmit statement

we shoukld either remove it or make it commented